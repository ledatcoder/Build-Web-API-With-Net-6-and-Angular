$gradient-start :#ed6ea0;
$gradient-end :#ec8c69;
.menu{
  background-image: linear-gradient(to right, $gradient-start 0%, $gradient-end 100%);
  border-radius:0.5rem;
  text-transform: uppercase;
  box-shadow: inset 0.1rem 0.1rem 0.5rem rgba(0, 0, 0, 0.15);
  
  a{
    color: #fff;
    text-decoration: none;
    font-weight: 300;
    &:focus,
    &:focus-within{
      outline:none;
    }
  }
  > ol{
    display:flex;
    > li {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
    }
  }
}
@media(min-width: 45rem){
  .menu{
    > ol{
      justify-content: space-around;
      &:hover,
      &:focus-within{
        > li:first-child{
          > a{
              opacity:0.6;
          }
        }
      }
      > li {
        flex: 1 1 0;
        &:last-child:after {
          content: '';
          position: absolute;
          top: 0;
          width: 100%;
          bottom: 0;
          margin-right: -50%;
          background: rgba(0, 0, 0, 0.1);
          border-radius: 0.5rem;
          z-index: 0;    
          transition: 350ms cubic-bezier(1, 0.49, 0.09, 1.29) all;
          pointer-events: none;
        }
        @for $i from 1 to 12 {
          &:first-child:nth-last-child( #{$i} ) ~ li:last-child:after{          
                right: 50% + 100% * ($i - 1);
            }
        }
        @for $i from 1 to 12 {
          &:first-child:nth-last-child( #{$i} ),
          &:first-child:nth-last-child( #{$i} ) ~ li{          
            @for $j from 1 to $i {
              &:nth-child( #{$j} ):hover,
              &:nth-child( #{$j} ):focus,
              &:nth-child( #{$j} ):focus-within{     
                ~ li:last-child:after{
                  right: 50% + 100% * ($i - $j);
                }
                > ol a{
                  box-shadow: inset 0 0 0 3rem rgba(0, 0, 0, 0), inset 0 0 0 3rem rgba(237, 110, 160, (1 - (1/$i)*$j));
                  &:hover,
                  &:focus,
                  &:focus-within{
                  box-shadow: inset 0 0 0 3rem rgba(0, 0, 0, 0.1), inset 0 0 0 3rem rgba(237, 110, 160, (1 - (1/$i)*$j));
                  }
                }
              } 
              &:last-child:hover:after,
              &:last-child:focus:after,
              &:last-child:focus-within:after{
                right: 50%;
              }
            }
          }
        }
        &:first-child{
          > a{
              opacity:1;
          }
        }
        > a{
          padding: 2rem 0;
          font-size: 1.6vw;
          position: relative;
          width: 100%;
          text-align: center;
          z-index: 1;
          opacity:0.7;
          transition: 250ms ease all;
        }
        > ol{
          position:absolute;
          top:100%;
          left:0;
          width: 100%;
          visibility: hidden;
          > li{
            margin-top:0.5rem;
            transition: 250ms cubic-bezier(0.42, 0.83, 0.49, 1.35) transform;
            transform: scale(0);
            > a{            
              display: block;
              text-align: center;
              border-radius: 0.2rem;
              padding: 1rem 0.5rem;
              font-size: 1.4vw;
              background: $gradient-end;
              color: rgba(255,255,255,0.6);
              transition: 250ms ease all;
              &:hover,
              &:focus,
              &:focus-within{
                box-shadow: inset 0 0 0 3rem rgba(0,0,0,0.1);
                color: rgba(255,255,255,1);
              }
            }
          }
        }
        &:hover,
        &:focus,
        &:focus-within{
            > a{
              opacity: 1 !important;
            }
            > ol{    
              visibility: visible;  
              > li{
                transform: scale(1);
                &:first-child{
                  transition-delay: 150ms;
                }
              }
              @for $k from 1 to 12 {
                > li:nth-child( #{$k} ){ 
                  transition-delay: 150ms * $k;
                }
              }
            }
        }
      }
    }
  }
}
@media(max-width: 45rem){
  .menu{
    background-image: linear-gradient(to bottom, $gradient-start 0%, $gradient-end 100%);
    a{
      font-size:1.4rem;
      padding: 1rem 0.5rem;
    }
    > ol{
      flex-direction: column;
      > li {
        flex-direction: column;
        align-items: stretch;
        text-align: center;
        > a:nth-last-child(2){
          position:relative;
          &:after{
            content:'';
            position:absolute;
            top: 50%;
            margin-top: -0.25rem;
            right: 1.5rem;
            border-top: 0.5rem solid #fff;
            border-left: 0.3rem solid transparent;
            border-right: 0.3rem solid transparent;
            transition: 250ms ease all;
          }
        }
        &:focus-within,
        &:focus,
        > a:hover,
        > a:focus-within,
        > a:focus{
          &:nth-last-child(2){
            &:after{
              transform: rotate(180deg);
            }
          }
          + ol{
            max-height: 12rem;
          }
        }
        > ol{
          background: rgba(0,0,0,0.1);
          box-shadow: inset 0.1rem 0.1rem 0.5rem rgba(0, 0, 0, 0.15);
          overflow:hidden;
          max-height:0;
          transition: 250ms ease all;
          > li{
            a{
              display:block;
              font-size:1.2rem;
            }
          }
        }
      }
    }
  }
}
.cart-no {
    position: absolute;
    min-height: 25px;
    min-width: 25px;
    border-radius: 50%;
    font-size: 1em;
    background-color: blue;
    color: rgb(102, 240, 10);
    text-align: center;
    top: -12px;
    right: 32px;
}

.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
  pulse: #ef6eae, 
  close: #ff7f82, 
  raise: #e96507, 
  up: #e4cb58, 
  slide: #8fc866, 
  offset: #19bc8b
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}


// Basic button styles
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
}

h1 { font-weight: 400; }

code { 
  color: #e4cb58;
  font: inherit;
}

a {
  text-decoration: none;
  color: black;
  &.active{
    color: #e96507;
  }
}
.logo{
  cursor: pointer;
  &:focus {
    outline: none;
  }
}

